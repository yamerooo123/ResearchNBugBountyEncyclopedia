# Input and output JAR files.
-injars shell.jar
-outjars shell_obfuscated.jar

# Reference the Java runtime library.
-libraryjars "<java.home>/jmods/java.base.jmod"

################################################################################
# Aggressive Optimization and Obfuscation Settings
################################################################################

# Allow ProGuard to modify access levels (e.g., change private to public) for
# more aggressive renaming.
-allowaccessmodification

# Run more optimization passes (default is 2, here we run 5).
-optimizationpasses 5

# Aggressively overload method names (results in shorter and less meaningful names).
-overloadaggressively

# Repackage all classes into the default (unnamed) package.
-repackageclasses ''

# Merge interfaces where possible.
-mergeinterfacesaggressively

# Apply nearly all optimizations.
# (The exclusion here prevents arithmetic simplifications that might break some code.)
-optimizations !code/simplification/arithmetic

################################################################################
# Reduce Log Noise
################################################################################

# Suppress notes and warnings that could give hints about the code structure.
-dontnote
-dontwarn

################################################################################
# Keep Rules: Retain the entry point
################################################################################

# Keep the main class and its main method to ensure the program runs correctly.
-keep public class shell {
    public static void main(java.lang.String[]);
}

# Optionally, you can keep some key attributes (like annotations and line numbers)
# that might be needed for reflection or stack traces.
-keepattributes *Annotation*,EnclosingMethod,Signature,InnerClasses,SourceFile,LineNumberTable
